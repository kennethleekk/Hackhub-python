# Copyright 2015 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import json

from bookshelf import get_model, oauth2, storage
from flask import Blueprint, current_app, redirect, render_template, request, \
    session, url_for
from google.oauth2 import id_token
from google.auth.transport import requests

sonbalance = 100

crud = Blueprint('crud', __name__)


def upload_image_file(file):
    """
    Upload the user-uploaded file to Google Cloud Storage and retrieve its
    publicly-accessible URL.
    """
    if not file:
        return None

    public_url = storage.upload_file(
        file.read(),
        file.filename,
        file.content_type
    )
    
    
    current_app.logger.info(
        "Uploaded file %s as %s.", file.filename, public_url)

    return public_url

@crud.route("/")
def main_route():
    if 'profile' in session:
         return list_mine()
    else:
         return render_template("main_for_anonymous.html")

@crud.route("/search")
def list():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    books, next_page_token = get_model().list(cursor=token)

    return render_template(
        "list.html",
        books=books,
        next_page_token=next_page_token)
    
@crud.route("/appDetails_new")
def appDetails_new():
    data = request.form.to_dict(flat=True)
    books = get_model().read(data['id'])

    return json.dumps(books)

@crud.route("/appDetails_onlyone")
def appDetails_onlyone():
    appList = [
  {
    "title": "Funds Transfer",
    "identifier": "fundstransfer",
    "thumbnail": "./appJSONs/thumbnails/image1.jpg",
    "keywords": "fundstransfer banking digital customerfacing retail rbwm allscreens",
    "content" : {
      "descriptionText": "Description text goes here .......maximum limit 200 chars",
      "additionalResources": [
         "./appJSONs/resources/fundstransfer/image1",
        "./appJSONs/resources/fundstransfer/image2",
        "./appJSONs/resources/fundstransfer/video1"
      ],
      "githubLink" : "https://github.com/snehaagarwal6108/fundTranser.git",
      "nexusLink" : "http://nexus/abc"
    }
  }
]

    
    
    return json.dumps(appList)

@crud.route("/appDetails")
def appDetails():
    appList = [
  {
    "title": "Funds Transfer",
    "identifier": "fundstransfer",
    "thumbnail": "./appJSONs/thumbnails/image1.jpg",
    "keywords": "fundstransfer banking digital customerfacing retail rbwm allscreens",
    "content" : {
      "descriptionText": "Description text goes here .......maximum limit 200 chars",
      "additionalResources": [
         "./appJSONs/resources/fundstransfer/image1",
        "./appJSONs/resources/fundstransfer/image2",
        "./appJSONs/resources/fundstransfer/video1"
      ],
      "githubLink" : "https://github.com/snehaagarwal6108/fundTranser.git",
      "nexusLink" : "http://nexus/abc"
    }
  },
  {
    "title": "Login",
    "identifier": "login",
    "thumbnail": "./thumbnails/fundstransfer",
    "keywords": "input userlogin login allscreens",
    "content" : {
      "descriptionText": "Description text goes here .......maximum limit 200 chars",
      "additionalResources": [
        "./appJSONs/resources/fundstransfer/image1",
        "./appJSONs/resources/fundstransfer/image2",
        "./appJSONs/resources/fundstransfer/video1"
      ],
      "githubLink" : "https://github.com/snehaagarwal6108/loginPage.git",
      "nexusLink" : "http://nexus/abc"
    }
  },
  {
    "title": "Calendar",
    "identifier": "calendar",
    "thumbnail": "./thumbnails/calendar",
    "keywords": "calendar date dateandtime datetime",
    "content" : {
      "descriptionText": "Description text goes here .......maximum limit 200 chars",
      "additionalResources": [
        "./appJSONs/resources/fundstransfer/image1",
        "./appJSONs/resources/fundstransfer/image2",
        "./appJSONs/resources/fundstransfer/video1"
      ],
      "githubLink" : "https://github.com/snehaagarwal6108/calendar.git",
      "nexusLink" : "http://nexus/abc"
    }
  },
{
    "title": "Bill Payment",
    "identifier": "billpayment",
    "thumbnail": "./appJSONs/thumbnails/image1.jpg",
    "keywords":"billpayment digital retail rbwm allscreens",
"content" : {
      "descriptionText": "Description text goes here .......maximum limit 200 chars",
      "additionalResources": [
        "./appJSONs/resources/fundstransfer/image1",
        "./appJSONs/resources/fundstransfer/image2",
        "./appJSONs/resources/fundstransfer/video1"
      ],
      "githubLink" : "https://github.com/pallaviteli/stencil",
      "nexusLink" : "http://nexus/abc"
    }
  },
{
    "title": "Mailbox",
    "thumbnail": "./appJSONs/thumbnails/image1.jpg",
    "keywords": "mailbox email notification",
    "identifier": "mailbox",
"content" : {
      "descriptionText": "Description text goes here .......maximum limit 200 chars",
      "additionalResources": [
        "./appJSONs/resources/fundstransfer/image1",
        "./appJSONs/resources/fundstransfer/image2",
        "./appJSONs/resources/fundstransfer/video1"
      ],
      "githubLink" : "https://github.com/snehaagarwal6108/MailBox.git",
      "nexusLink" : "http://nexus/abc"
    }
  },
{
    "title": "Pin Reset",
    "identifier": "pinreset",
    "thumbnail": "./appJSONs/thumbnails/image1.jpg",
    "keywords":
      "banking pinreset digital retail rbwm allscreens",
"content" : {
      "descriptionText": "Description text goes here .......maximum limit 200 chars",
      "additionalResources": [
        "./appJSONs/resources/fundstransfer/image1",
        "./appJSONs/resources/fundstransfer/image2",
        "./appJSONs/resources/fundstransfer/video1"
      ],
      "githubLink" : "https://github.com/pallaviteli/stencil",
      "nexusLink" : "http://nexus/abc"
    }
  }
]



    
    
    return json.dumps(appList)

@crud.route('/appList', methods=['GET'])
def appList():
    appList = get_model().getAppList()
    return json.dumps(appList)

@crud.route("/searchEvent")
def listEvent():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    events, next_page_token = get_model().listEvent(cursor=token)

    return render_template(
        "listEvent.html",
        events=events,
        next_page_token=next_page_token)

# [START list_mine]
@crud.route("/mine")
@oauth2.required
def list_mine():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    books, next_page_token = get_model().list_by_user(
        user_id=session['profile']['email'],
        cursor=token)
    
    userRole = get_model().getUserRole(userId=session['profile']['email'])
    session['userRole'] = userRole
    
    return render_template(
        "list.html",
        books=books,
        next_page_token=next_page_token)
# [END list_mine]


# [START list_search]
@crud.route("/list_search", methods=['GET', 'POST'])
def list_search():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    books, next_page_token = get_model().list_by_filter(
        _description=request.form.get('description', ''),
        cursor=token)

    return render_template(
        "list_search.html",
        books=books,
        next_page_token=next_page_token,
        description=request.form.get('description', ''))
# [END list_search]

@crud.route('/<id>')
def view(id):
    book = get_model().read(id)
    return render_template("view.html", book=book)

@crud.route('/detail/<id>')
def detailview(id):
    book = get_model().read(id)
    return render_template("viewForm.html", book=book)

@crud.route('/event/<id>')
def viewEvent(id):
    event = get_model().readEvent(id)
    return render_template("viewEvent.html", event=event)

# [START add]
@crud.route('/add', methods=['GET', 'POST'])
def add():
    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        # If an image was uploaded, update the data to point to the new image.
        image_url = upload_image_file(request.files.get('image'))

        if image_url:
            data['imageUrl'] = image_url

        # If the user is logged in, associate their profile with the new book.
        if 'profile' in session:
            data['createdBy'] = session['profile']['name']
            data['createdById'] = session['profile']['email']

        book = get_model().create(data)

        return redirect(url_for('.view', id=book['id']))

    return render_template("form.html", action="Add", book={})
# [END add]

# [START addEvent]
@crud.route('/addEvent', methods=['GET', 'POST'])
def addEvent():
    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        # If an image was uploaded, update the data to point to the new image.
        #image_url = upload_image_file(request.files.get('image'))

        #if image_url:
            #data['imageUrl'] = image_url

        # If the user is logged in, associate their profile with the new book.
        if 'profile' in session:
            data['createdBy'] = session['profile']['name']
            data['createdById'] = session['profile']['email']

        event = get_model().createEvent(data)

        return redirect(url_for('.viewEvent', id=event['id']))

    return render_template("formEvent.html", action="Add", event={})
# [END add]

# [START addEvent]
@crud.route('/hackhub', methods=['GET', 'POST', 'DELETE', 'PUT'])
def hackhub():
    if request.method == 'GET':
        requestdata = request.form.to_dict(flat=True)
        
        if 'id' in requestdata:
            resonsedata = get_model().getHackhubDetail(requestdata['id'])
        else:
            resonsedata = get_model().getHackhubList()
        
        return json.dumps(resonsedata)
        
    if request.method == 'POST':
        requestdata = request.form.to_dict(flat=True)
        #for k, v in requestdata.items():
            #print(k, v)
        
        attachment1 = upload_image_file(request.files.get('attachment1'))
        if attachment1:
            requestdata['attachmenturl1'] = attachment1
        requestdata.pop('attachment1', None)
        
        attachment2 = upload_image_file(request.files.get('attachment2'))
        if attachment2:
            requestdata['attachmenturl2'] = attachment2
        requestdata.pop('attachment2', None)
            
        attachment3 = upload_image_file(request.files.get('attachment3'))
        if attachment3:
            requestdata['attachmenturl3'] = attachment3
        requestdata.pop('attachment3', None)
            
        attachment4 = upload_image_file(request.files.get('attachment4'))
        if attachment4:
            requestdata['attachmenturl4'] = attachment4
        requestdata.pop('attachment4', None)
            
        attachment5 = upload_image_file(request.files.get('attachment5'))
        if attachment5:
            requestdata['attachmenturl5'] = attachment5
        requestdata.pop('attachment5', None)
        
        resonsedata = get_model().createHackhub(requestdata)
        return json.dumps(resonsedata)
    
    if request.method == 'DELETE':
        requestdata = request.form.to_dict(flat=True)
        resonsedata = get_model().deleteHackhub(requestdata['id'])
        return json.dumps(resonsedata)
    
    if request.method == 'PUT':
        requestdata = request.form.to_dict(flat=True)
        
        attachment1 = upload_image_file(request.files.get('attachment1'))
        if attachment1:
            requestdata['attachmenturl1'] = attachment1
        requestdata.pop('attachment1', None)
        
        attachment2 = upload_image_file(request.files.get('attachment2'))
        if attachment2:
            requestdata['attachmenturl2'] = attachment2
        requestdata.pop('attachment2', None)
            
        attachment3 = upload_image_file(request.files.get('attachment3'))
        if attachment3:
            requestdata['attachmenturl3'] = attachment3
        requestdata.pop('attachment3', None)
            
        attachment4 = upload_image_file(request.files.get('attachment4'))
        if attachment4:
            requestdata['attachmenturl4'] = attachment4
        requestdata.pop('attachment4', None)
            
        attachment5 = upload_image_file(request.files.get('attachment5'))
        if attachment5:
            requestdata['attachmenturl5'] = attachment5
        requestdata.pop('attachment5', None)
        
        resonsedata = get_model().updateHackhub(requestdata)
        return json.dumps(resonsedata)
# [END add]

@crud.route('/hackhub/<id>', methods=['GET'])
def hackhubid(id):
    if request.method == 'GET':
        resonsedata = get_model().getHackhubDetail(id)
        return json.dumps(resonsedata)
# [END add]

# [START addEvent]
@crud.route('/addEventNoCheck', methods=['GET', 'POST'])
def addEventNoCheck():
    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        # If an image was uploaded, update the data to point to the new image.
        #image_url = upload_image_file(request.files.get('image'))

        #if image_url:
            #data['imageUrl'] = image_url

        image_url = upload_image_file(request.files.get('present'))

        event = get_model().createEvent(data)

        return json.dumps(image_url)

    return render


@crud.route('/<id>/edit', methods=['GET', 'POST'])
def edit(id):
    book = get_model().read(id)

    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        image_url = upload_image_file(request.files.get('image'))

        if image_url:
            data['imageUrl'] = image_url

        book = get_model().update(data, id)

        return redirect(url_for('.view', id=book['id']))

    return render_template("form.html", action="Edit", book=book)


@crud.route('/<id>/editEvent', methods=['GET', 'POST'])
def editEvent(id):
    event = get_model().readEvent(id)

    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        image_url = upload_image_file(request.files.get('image'))

        #if image_url:
            #data['imageUrl'] = image_url

        event = get_model().update(data, id)

        return redirect(url_for('.viewEvent', id=event['id']))

    return render_template("formEvent.html", action="Edit", event=event)


@crud.route('/<id>/delete')
def delete(id):
    get_model().delete(id)
    return redirect(url_for('.list'))

@crud.route('/balance')
def balance():
    
    return {'name': 'son', 'balance': '100'}
@crud.route('/oauth/<token>', methods=['GET', 'POST'])
def oauth(token):
    print(token)
    
    try:
        print("123")
        # Specify the CLIENT_ID of the app that accesses the backend:
        idinfo = id_token.verify_oauth2_token(token, requests.Request(), "1062436335774-1ch8mfvedkbggu8gtpr76106t0k63aru.apps.googleusercontent.com")
        print("abc")
        # Or, if multiple clients access the backend server:
        # idinfo = id_token.verify_oauth2_token(token, requests.Request())
        # if idinfo['aud'] not in [CLIENT_ID_1, CLIENT_ID_2, CLIENT_ID_3]:
        #     raise ValueError('Could not verify audience.')
        if idinfo['iss'] not in ['accounts.google.com', 'https://accounts.google.com']:
            raise ValueError('Wrong issuer.')

        # If auth request is from a G Suite domain:
        # if idinfo['hd'] != GSUITE_DOMAIN_NAME:
        #     raise ValueError('Wrong hosted domain.')

        # ID token is valid. Get the user's Google Account ID from the decoded token.
        userid = idinfo['sub']
        
        print(idinfo)
    except ValueError:
        print("ValueError")
            # Invalid token
        pass
    return idinfo