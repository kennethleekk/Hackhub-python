# Copyright 2015 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import pprint

from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from enum import unique
from flask_marshmallow import Marshmallow
from marshmallow import fields


builtin_list = list


db = SQLAlchemy()
ma = Marshmallow()

def init_app(app):
    # Disable track modifications, as it unnecessarily uses memory.
    app.config.setdefault('SQLALCHEMY_TRACK_MODIFICATIONS', False)
    db.init_app(app)


def from_sql(row):
    """Translates a SQLAlchemy model instance into a dictionary"""
    data = row.__dict__.copy()
    data['id'] = row.id
    data.pop('_sa_instance_state')
    return data

def from_sql_noid(row):
    """Translates a SQLAlchemy model instance into a dictionary"""
    data = row.__dict__.copy()
    data.pop('_sa_instance_state')
    return data

def from_sql_removeid(row):
    """Translates a SQLAlchemy model instance into a dictionary"""
    data = row.__dict__.copy()
    data.pop('id')
    data.pop('_sa_instance_state')
    return data

class Book(db.Model):
    __tablename__ = 'books'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255))
    author = db.Column(db.String(255))
    publishedDate = db.Column(db.String(255))
    imageUrl = db.Column(db.String(255))
    description = db.Column(db.String(4096))
    createdBy = db.Column(db.String(255))
    createdById = db.Column(db.String(255))
    eventName = db.Column(db.String(255))
    githubUrl = db.Column(db.String(255))
    confluenceUrl = db.Column(db.String(255))
    jiraUrl = db.Column(db.String(255))
    demoUrl = db.Column(db.String(255))
    pptUrl = db.Column(db.String(255))

    def __repr__(self):
        return "<Book(title='%s', author=%s)" % (self.title, self.author)
    
class UserRole(db.Model):
    __tablename__ = 'userrole'

    userId = db.Column(db.String(255), primary_key=True)
    role = db.Column(db.String(1))
    # U - User, A - Admin, S - Super Admin
    status = db.Column(db.String(1))
    # A - Active, P - Pending
    staffId = db.Column(db.String(10))
    staffMail = db.Column(db.String(255))
    activateCode = db.Column(db.String(255))
    
    def __repr__(self):
        return "<UserRole(userId='%s', role=%s, status=%s)" % (self.userId, self.role, self.status)


class Event(db.Model):
    __tablename__ = 'event'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255))
    startDateTime = db.Column(db.DateTime(True))
    endDateTime = db.Column(db.DateTime(True))
    description = db.Column(db.String(4096))
    createdBy = db.Column(db.String(255))
    createdById = db.Column(db.String(255))
    admin1 = db.Column(db.String(255))
    admin2 = db.Column(db.String(255))
    admin3 = db.Column(db.String(255))
    admin4 = db.Column(db.String(255))
    
    def __repr__(self):
        return "<Event(name='%s')" % (self.name)
    
class AppList(db.Model):
    __tablename__ = 'applist'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255))
    symbol = db.Column(db.String(255))
    keywords = db.Column(db.String(255))
    
    appdetail = db.relationship(
        'AppDetail',
        backref='applist',
        cascade='all, delete, delete-orphan',
        single_parent=True,
        order_by='asc(AppDetail.id)'
    )
    
    #def __repr__(self):
        #return "<AppList(title='%s')" % (self.name)

class AppDetail(db.Model):
    __tablename__ = 'appdetail'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(255), db.ForeignKey('applist.title'))
    additionalResources = db.Column(db.String(255))
    
    #def __repr__(self):
        #return "<AppDetail(title='%s')" % (self.name)

class AppListSchema(ma.ModelSchema):
    class Meta:
        model = AppList
        sqla_session = db.session
    contents = fields.Nested('AppListAppDetailSchema', default=[], many=True)
    
class AppListAppDetailSchema(ma.ModelSchema):
    """
    This class exists to get around a recursion issue
    """
    id = fields.Int()
    title = fields.Str()
    appdetail_additionalResources = fields.Str()

class UserAccess(db.Model):
    __tablename__ = 'useraccess'

    id = db.Column(db.Integer, primary_key=True)
    userId = db.Column(db.String(255), primary_key=True)
    status = db.Column(db.String(1))
    # A - Allow, P - Pending
    activateCode = db.Column(db.String(255))
    
    def __repr__(self):
        return "<UserAccess(id='%s', userId=%s, status=%s)" % (self.id, self.userId, self.status)
    
def getAppList():
    query = (AppList.query
             .order_by(AppList.id))
    books = builtin_list(map(from_sql_removeid, query.all()))
    return (books)

def getAppDetail(in_title):
    query = (AppList.query.filter_by(title=in_title).outerjoin(AppDetail).one_or_none())
    if query is not None:

        # Serialize the data for the response
        applist_schema = AppListSchema()
        
        data = applist_schema.dump(query).copy()
        
        #pprint.pprint(data)
        data.pop('id')
        return data
    else:
        abort(404, f"App Detail not found for Title: {in_title}")

def getUserRole(userId):
    result = UserRole.query.get(userId)
    if not result:
        return None
    return from_sql_noid(result)

def listEvent(limit=10, cursor=None):
    cursor = int(cursor) if cursor else 0
    query = (Event.query
             .order_by(Event.endDateTime)
             .limit(limit)
             .offset(cursor))
    events = builtin_list(map(from_sql, query.all()))
    next_page = cursor + limit if len(events) == limit else None
    return (events, next_page)


def list(limit=10, cursor=None):
    cursor = int(cursor) if cursor else 0
    query = (Book.query
             .order_by(Book.title)
             .limit(limit)
             .offset(cursor))
    books = builtin_list(map(from_sql, query.all()))
    next_page = cursor + limit if len(books) == limit else None
    return (books, next_page)

def appDetails():
    query = (Book.query
             .order_by(Book.title))
    books = builtin_list(map(from_sql, query.all()))
    return (books)

# [START list_by_user]
def list_by_user(user_id, limit=10, cursor=None):
    cursor = int(cursor) if cursor else 0
    query = (Book.query
             .filter_by(createdById=user_id)
             .order_by(Book.title)
             .limit(limit)
             .offset(cursor))
    books = builtin_list(map(from_sql, query.all()))
    next_page = cursor + limit if len(books) == limit else None
    return (books, next_page)
# [END list_by_user]


# [START list_by_search]
def list_by_filter(_description, limit=10, cursor=None):
    cursor = int(cursor) if cursor else 0
    query = (Book.query
             .filter(Book.description.like('%'+_description+'%'))
             .order_by(Book.title)
             .limit(limit)
             .offset(cursor))
    books = builtin_list(map(from_sql, query.all()))
    next_page = cursor + limit if len(books) == limit else None
    return (books, next_page)
# [END list_by_search]

def read(id):
    result = Book.query.get(id)
    if not result:
        return None
    return from_sql(result)


def readEvent(id):
    result = Event.query.get(id)
    if not result:
        return None
    return from_sql(result)


def create(data):
    book = Book(**data)
    db.session.add(book)
    db.session.commit()
    return from_sql(book)


def createEvent(data):
    event = Event(**data)
    db.session.add(event)
    db.session.commit()
    return from_sql(event)


def update(data, id):
    book = Book.query.get(id)
    for k, v in data.items():
        setattr(book, k, v)
    db.session.commit()
    return from_sql(book)


def delete(id):
    Book.query.filter_by(id=id).delete()
    db.session.commit()


def _create_database():
    """
    If this script is run directly, create all the tables necessary to run the
    application.
    """
    app = Flask(__name__)
    app.config.from_pyfile('../config.py')
    init_app(app)
    with app.app_context():
        db.create_all()
    print("All tables created")


if __name__ == '__main__':
    _create_database()
